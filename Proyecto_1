// Universidad del Valle
// Digital 2
// Ana Gramajo
// Sensor de temperatura, Adafruit, leds y servo según rango

#include <Arduino.h>
#include <driver/ledc.h>
#include "display7seg.h"

/************************** Configuración ***********************************/

#include "config.h"

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Variables globales

  // Se definen los pines

  #define boton 15 // Botón
  #define temperatura 35 // Sensor temperatura
  #define ledrojo 5 
  #define ledverde 4
  #define ledazul 2
  #define servo 13
  // Display
  #define dis1 27 
  #define dis2 33
  #define dis3 32 
  // Segmentos del Display
  #define sA 26
  #define sB 12
  #define sC 19
  #define sD 22
  #define sE 23
  #define sF 25
  #define sG 18
  #define sP 21

  // Variables para convertir el voltaje del sensor de temp. a temperatura
  #define ADC_VREF_mV    3300.0 // Voltaje en milivoltios del ESP32
  #define ADC_RESOLUTION 4096.0 // Resolución del ADC

  // Variables para usar PWMs
  #define canalPWM 9 // Canal del servo
  #define rojoPWM 0 // Canal del led rojo
  #define verdePWM 1 // Canal del led verde
  #define azulPWM 2 // Canal del led azul
  #define freqPWM 50 // Frecuencia
  #define resPWM 10 // Resolución
  #define freqPWMleds 5000 // Frecuencia en Hz para los leds
  #define resPWMleds 8 // Resolución en bits para los leds

  // Otras variables

  volatile bool boton_p = false; // Variable para ver cuando se presiona el botón
  float temp = 0; // Temperatura leída
  int servoAntes = 30; // Última posición del servo
  int servoAhora = 0; // Nueva posición del servo

// Prototipos de funciones

  float leer_temp(void); // Función para leer el sensor de temp. Devuelve la temperatura
  void enviar_temp(float t); // Enviar la temperatura al dashboard. Su parámetro es la temperatura
  void color(int R, int G, int B); // Cambia el color del led.
  void colocarServo(int antes, int ahora); // Mueve el servo.
  void displayTemp(float T); // Muestra la temperatura en el display.
  void enviar_posicion(int p); // Enviar la posición del reloj de temperatura al dashboard

// set up del feed
AdafruitIO_Feed *temp_ = io.feed("temperatura");
AdafruitIO_Feed *posicion_ = io.feed("reloj");

// Interrupción del botón
void IRAM_ATTR boton_isr() {
  portENTER_CRITICAL_ISR(&mux);
    boton_p = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void setup() {

  // inicia la conexión serial
  Serial.begin(115200);

  while(! Serial);
  Serial.print("Connecting to Adafruit IO");
  // conectarse a io.adafruit.com
  io.connect();

  // esperar a que se conecte
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  
  Serial.println();
  Serial.println(io.statusText());

  // Setup del botón y de la interrupción
  pinMode(boton, INPUT_PULLDOWN);
  attachInterrupt(boton, boton_isr, RISING);

  // Setup de las leds
  pinMode(ledrojo,OUTPUT);
  pinMode(ledverde,OUTPUT);
  pinMode(ledazul,OUTPUT);
  // PWM del led rojo
  ledcSetup(rojoPWM, freqPWMleds, resPWMleds); 
  ledcAttachPin(ledrojo, rojoPWM);
  // PWM del led verde
  ledcSetup(verdePWM, freqPWMleds, resPWMleds); 
  ledcAttachPin(ledverde, verdePWM);
  // PWM del led azul
  ledcSetup(azulPWM, freqPWMleds, resPWMleds); 
  ledcAttachPin(ledazul, azulPWM);
  
  // PWM del servo
  ledcSetup(canalPWM, freqPWM, resPWM);
  ledcAttachPin(servo, canalPWM);
  // Configuración inicial del servo
  ledcWrite(canalPWM, servoAntes);

  // Setup del display de 7 segmentos
  configurarDisplay(sA, sB, sC, sD, sE, sF, sG, sP);
  pinMode(dis1, OUTPUT);
  pinMode(dis2, OUTPUT);
  pinMode(dis3, OUTPUT);
  // Configuración incial del display
  digitalWrite(dis1, HIGH);
  digitalWrite(dis2, LOW);
  digitalWrite(dis3, LOW);
  displayTemp(0);
}

void loop() {

  // Espera la interrupcón del botón
  if (boton_p) {
    // Se inicia Adafruit
    io.run();
    // Se lee el sensor de temperatura
    temp = leer_temp();
    // Envía los datos al dashboard
    enviar_temp(temp);
    // Cambia el color del led y la posición del servo según el valor de temp
    if (temp > 37.5) {
      color(255,0,0);
      servoAhora = 120;
      colocarServo(servoAntes,servoAhora);
      servoAntes = servoAhora;
      enviar_posicion(135);
    }
    if (temp > 37.0 && temp < 37.5) {
      color(255,255,0);
      servoAhora = 84;
      colocarServo(servoAntes,servoAhora);
      servoAntes = servoAhora;
      enviar_posicion(90);
    }
    if (temp < 37.00) {
      color(0,255,0);
      servoAhora = 48;
      colocarServo(servoAntes,servoAhora);
      servoAntes = servoAhora;
      enviar_posicion(45);
    }
    boton_p = false;
  }
  displayTemp(temp);
}

// Otras funciones
  
  float leer_temp(void) {
    // lee el valor ADC
    int adcVal = analogRead(temperatura);
    //  convierte el valor ADC a voltaje (mV)
    float milliVolt = adcVal * (ADC_VREF_mV / ADC_RESOLUTION);
    // convierte el voltaje a °C
    float tempC = milliVolt / 10;
    return (tempC);
  }
  
  void enviar_temp(float t) {
    // Muestra lo que se envía en la pantalla serial
    Serial.print("temperatura -> ");
    Serial.println(t);
    // Envía el valor
    temp_->save(t);
  }

  void enviar_posicion(int p) {
    // Muestra lo que se envía en la pantalla serial
    Serial.print("posición servo -> ");
    Serial.println(p);
    // Envía el valor
    posicion_->save(p);
  }
  
  void color(int R, int G, int B) {
    // Actualiza el color de cada led
    ledcWrite(rojoPWM,   R);
    ledcWrite(verdePWM, G);
    ledcWrite(azulPWM,  B);
  }
  
  void colocarServo(int antes, int ahora) {
    // Actualiza la posición del servo
    if (antes < ahora) {
      for(int i=antes; i<ahora; i++) {
        ledcWrite(canalPWM, i);
      }
    } else if (antes > ahora) {
      for(int i=antes; i>ahora; i--) {
        ledcWrite(canalPWM, i);
      }
    } else {
      ledcWrite(canalPWM, antes);
    }
  }

  
void displayTemp(float T) {
  float total = T*10;
  // Redondea a la unidad más cercana
  int intTotal = round(total);
  // Determina las decenas
  int decenas = intTotal/100;
  intTotal = intTotal - (100*decenas);
  // Determina las unidades
  int unidades = intTotal/10;
  intTotal = intTotal - (10*unidades);
  // Determina el decimal
  int decimal = intTotal;

  // Escribe las decenas en el display 1
  digitalWrite(dis1, HIGH);
  digitalWrite(dis2, LOW);
  digitalWrite(dis3, LOW);
  desplegarDisplay(decenas);
  desplegarPunto(0);
  delay(5);

  // Escribe las unidades en el display 2
  digitalWrite(dis1, LOW);
  digitalWrite(dis2, HIGH);
  digitalWrite(dis3, LOW);
  desplegarDisplay(unidades);
  // Utiliza el punto
  desplegarPunto(1);
  delay(5);

  // Escribe el decimal en el display 3
  digitalWrite(dis1, LOW);
  digitalWrite(dis2, LOW);
  digitalWrite(dis3, HIGH);
  desplegarDisplay(decimal);
  desplegarPunto(0);
  delay(5);
}
